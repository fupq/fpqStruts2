<%@ page language="java" contentType="text/html; charset=GB18030"
    pageEncoding="GB18030"%>
    <%@taglib uri="/struts-tags" prefix="s" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="GB18030">
<title>标签语法文档</title>
</head>
<body>
	<h1>标签语法</h1>	<br>
	<h2>创建动态输入字段</h2> <br>
	标签用于显示动态数据。要创建显示属性“postalCode”的输入字段，我们将字符串“postalCode”传递给textfield标记。<br>
	eg:<s:textfield name="postalCode"/>	<br>
	如果值堆栈上有“postalCode”属性，则其值将设置为输入字段。当字段提交回框架时，控件的值将被设置回“postalCode”属性。<br>
	
	<h2>使用表达式设置标签</h2>
	有时，我们希望将动态数据传递给标记。例如，我们可能希望显示带有输入字段的标签，我们可能希望从应用程序的消息资源中获取标签。因此，框架将解析标记属性中的表达式，以便我们可以在运行时将动态数据合并到标记属性中。表达式转义序列是“％{...}”。嵌入在转义序列中的任何文本都将作为表达式进行评估。<br>
	eg:<s:textfield key="postalCode.label" name="postalCode"/> <br>
	表达式语言（OGNL）允许我们调用方法并评估属性。该方法getText由ActionSupport提供，它是大多数Actions的基类。由于Action在堆栈上，我们可以从表达式调用它的任何方法，包括getText。 <br>
	
	
	<h1>非字符串属性</h1> <br>
	HTTP协议是基于文本的，但某些标签具有非String属性类型，如bool或int。为了使非String属性具有直观性，框架将所有非String属性作为表达式进行评估。在这种情况下，您不需要使用转义符号。（但是，如果你做了，框架将把它剥离。） <br>
	<h2>评估布尔值</h2> <br>
	<%-- eg:<s:select list="allFoldersName"  key="state.label" name="state" multiple="true"  /> <br> --%>
	由于该属性multiple映射到布尔属性，因此框架不会将该值解释为String。该值被计算为表达式并自动转换为布尔值。<br>
	由于很容易忘记哪些属性是String而哪些属性是非String，因此您仍然可以使用转义符号。<br>
	<h2>Evaluating booleans (verbose):评估布尔（冗长）</h2> <br>
	eg:<s:select list="list1" key="state.label" name="state" multiple="%{true}"/>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<br> <s:debug></s:debug> <br />
</body>
</html>